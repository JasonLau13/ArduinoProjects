#include <Keypad.h>  
#include <LiquidCrystal.h> 
#include "SPI.h"
#include "MFRC522.h"
#include <Servo.h>


#define SS_PIN 10
#define RST_PIN 9
#define LED_GREEN 2
#define LED_RED 3
 
LiquidCrystal lcd(5, 6, 7, 3, 1, 0);

Servo servo;

MFRC522 rfid(SS_PIN, RST_PIN);

MFRC522::MIFARE_Key key;

int angle = 0;    // intial servo's position
const byte ROWS = 3; //3 rows                                              //declare rows
const byte COLS = 3; //3 columns                                          //declare columns
char keys[ROWS][COLS] = {                                                     //declare 2 dimensional array to map keys
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'}
};

byte rowPins[ROWS] = {A0,A1,A2};                                            //connect to the row pinouts of the keypad
byte colPins[COLS] = {A3,A4,A5};                                            //connect to the column pinouts of the keypad

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );     //create instance of Keypad called keypad

int num[4];
int count = 0;                // counter for keypad 
int password[4] = {1,1,3,2};  //predefined user password
int isKey = 1;                   

void setup() {                // intialize lcd,rfid, setting output pin for green LED and servo 
    lcd.begin(16,2);                
    SPI.begin();
    rfid.PCD_Init();
    pinMode(LED_GREEN, OUTPUT);
    servo.attach(4);
    servo.write(0);
}

void loop() {

  char key = keypad.getKey();      
  
  if (key && isKey){
    num[count] = key-'0' ;     // store key pressed by user
    lcd.print('*');
    count++;
  } 
  
  if (count == 4 && isKey){       
    for (int x = 0; x < 4; x++){          // if user has entered 4 digit numbers, check if password is correct
      if(num[x] != password[x]){
            lcd.setCursor(2,1);
            lcd.print("Access denied");      
            count = 0;
            break;
      }
      if(x == 3){
        lcd.setCursor(2,1);
        lcd.print("Access Granted");
        count = 0;
        isKey = 0;                      // set flag to 0 so user can process to use rfid for authenification 
      }
    }
    delay(2000);
    lcd.clear();
  }
  
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial())
    return;

  // Serial.print(F("PICC type: "));
  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);
  // Serial.println(rfid.PICC_GetTypeName(piccType));

  // Check is the PICC of Classic MIFARE type
  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&
    piccType != MFRC522::PICC_TYPE_MIFARE_1K &&
    piccType != MFRC522::PICC_TYPE_MIFARE_4K) {
    
    Serial.println(F("Your tag is not of type MIFARE Classic."));
    return;
  }
  
  String strID = ""; 
  for (byte i = 0; i < 4; i++) {        //String conversion for rfid
    
    strID +=
    (rfid.uid.uidByte[i] < 0x10 ? "0" : "") +
    String(rfid.uid.uidByte[i], HEX) +
    (i!=3 ? ":" : "");
    
  }
  
  strID.toUpperCase();                     

  if (strID.indexOf("C7:06:83:08") >= 0 && !isKey) {          // if user has entered the correct password, check if the rfid identification is correct
    
    digitalWrite(LED_GREEN, HIGH);
    lcd.print("Access granted"); 
    delay(1000); 
    lcd.clear();      
    
    for(angle = 10; angle < 180; angle++)  
  {                                  
    servo.write(angle);                          // turn on servo to rotate for 180 degree
    delay(5);                   
  }
  
  delay(1000);
  lcd.clear();
  
  for(angle = 180; angle > 10; angle--)    
  {                                
    servo.write(angle);           
    delay(5);       
  }
  isKey = 1;
                  
   

  } else {
  
    digitalWrite(LED_GREEN, LOW);             
    lcd.print("Access denied");
    delay(2000);
    lcd.clear();
              
  }

  rfid.PICC_HaltA();
  rfid.PCD_StopCrypto1();
}
